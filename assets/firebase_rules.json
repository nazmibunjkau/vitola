  rules_version = '2';
  service cloud.firestore {
    match /databases/{database}/documents {

      match /cigars/{cigarId} {
        allow read: if request.auth != null;
        // If you ever write/edit cigars from the app, add write rules here.
      }

      match /{document=**}/members/{memberId} {
        allow read: if request.auth != null;
        allow create, delete: if request.auth != null && request.auth.uid == memberId;
      }

      // --- USERS ---
      match /users/{userId} {
        allow read: if request.auth != null;

        // Owner can write their own doc
        allow write: if request.auth != null && request.auth.uid == userId;

        // Non-owners may ONLY update the `followers` field (supports arrayUnion/arrayRemove)
        allow update: if request.auth != null
          && request.auth.uid != userId
          && request.writeFields.hasOnly(['followers']);

        match /notifications/{notifId} {
          // Only the recipient can read their notifications
          allow read: if request.auth != null && request.auth.uid == userId;

          // Anyone can create a notification FOR this user, with strict shape
          allow create: if request.auth != null
            && request.auth.uid != userId
            && request.resource.data.keys().hasOnly(['type','fromUserId','postId','commentText','timestamp','read'])
            && request.resource.data.fromUserId == request.auth.uid
            && request.resource.data.type in ['follow','like','comment']
            && request.resource.data.read == false;

          // Only the recipient can update/delete
          allow update, delete: if request.auth != null && request.auth.uid == userId;
        }
        
        match /full_profile/{docId} {
          // Only the owner can read/write their full profile
          allow read, create, update, delete: if request.auth != null && request.auth.uid == userId;
          // (optional) lock down allowed fields:
          // allow write: if request.auth != null
          //   && request.auth.uid == userId
          //   && request.resource.data.keys().hasOnly(['yearsSmoked','favoriteCigars','rarestCigars']);
        }
        
        match /joined_clubs/{clubId} {
          // Only the owner can read/write their own joined_clubs
          allow read, write, delete: if request.auth != null && request.auth.uid == userId;
        }
        
        match /humidors/{humidorId} {
          allow read, write, delete: if request.auth != null && request.auth.uid == userId;

          match /humidor_cigars/{cigarId} {
            allow read, write, delete: if request.auth != null && request.auth.uid == userId;
          }
          
          match /cigars/{cigarId} {
            allow read, write, delete: if request.auth != null && request.auth.uid == userId;
          }
        }
      }

      // --- CLUBS ---
      match /clubs/{clubId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && request.auth.uid == resource.data.createdBy;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.createdBy;

        // ðŸ‘‡ Add this for the events subcollection
        match /events/{eventId} {
          // anyone signed-in can read events
          allow read: if request.auth != null;

          // only the club creator can create/update/delete events
          allow create, update, delete: if request.auth != null
            && request.auth.uid == get(/databases/$(database)/documents/clubs/$(clubId)).data.createdBy;
        }

        // ðŸ‘‡ Posts / Club activities
        match /club_activities/{activityId} {
          function isSignedIn() { return request.auth != null; }
          function clubDoc() { return get(/databases/$(database)/documents/clubs/$(clubId)); }
          function isClubCreator() { return isSignedIn() && request.auth.uid == clubDoc().data.createdBy; }
          function isMember() { return isSignedIn() && exists(/databases/$(database)/documents/clubs/$(clubId)/members/$(request.auth.uid)); }
          function isAuthor() { return isSignedIn() && request.auth.uid == resource.data.createdBy; }

          // Anyone signed in can read posts
          allow read: if isSignedIn();

          // Only the author can create; must also be club creator or a member
          allow create: if isSignedIn()
            && request.auth.uid == request.resource.data.createdBy
            && (isClubCreator() || isMember())
            && request.resource.data.keys().hasOnly(['text','photos','createdAt','createdBy','authorName','authorPhoto'])
            && (request.resource.data.text is string || !(request.resource.data.keys().hasAny(['text'])))
            && (request.resource.data.photos is list || !(request.resource.data.keys().hasAny(['photos'])));

          // Only the author can update their own post
          allow update: if isAuthor();

          // Author or club creator can delete
          allow delete: if isAuthor() || isClubCreator();
        }
      }

      // --- USER ACTIVITIES ---
      match /user_activities/{activityId} {
        allow read: if request.auth != null;

        allow update: if request.auth != null && (
          request.auth.uid == resource.data.user_id ||
          request.writeFields.hasOnly(['likes'])
        );

        allow delete: if request.auth != null && request.auth.uid == resource.data.user_id;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.user_id;

        match /comments/{commentId} {
          allow read: if request.auth != null;
          allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
          allow delete: if request.auth != null && (
            request.auth.uid == resource.data.userId ||
            request.auth.uid == get(/databases/$(database)/documents/user_activities/$(activityId)).data.user_id
          );
        }
      }
    }
  }